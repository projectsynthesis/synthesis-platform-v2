// api/generate-course.js - –ü–™–õ–ù–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
console.log('üéØ API —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ —Å–µ –∑–∞—Ä–µ–∂–¥–∞...');
console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ environment variables:');
console.log('- GEMINI_API_KEY:', process.env.GEMINI_API_KEY ? '‚úÖ –ù–ê–õ–ò–ß–ï–ù' : '‚ùå –õ–ò–ü–°–í–ê');
console.log('- GEMINI_API_KEY –ø—ä—Ä–≤–∏ –∑–Ω–∞—Ü–∏:', process.env.GEMINI_API_KEY ? process.env.GEMINI_API_KEY.substring(0, 10) + '...' : '–ù–Ø–ú–ê');

let genAI = null;
let geminiAvailable = false;

// –û–ø–∏—Ç–≤–∞–º–µ –¥–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞–º–µ Gemini
try {
  const { GoogleGenerativeAI } = await import('@google/generative-ai');
  
  if (process.env.GEMINI_API_KEY) {
    genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    geminiAvailable = true;
    console.log('‚úÖ Gemini AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω –£–°–ü–ï–®–ù–û!');
  } else {
    console.log('‚ùå GEMINI_API_KEY –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –≤ environment variables');
  }
} catch (importError) {
  console.log('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç –Ω–∞ Gemini:', importError.message);
}

export default async function handler(req, res) {
  console.log('=== –ù–û–í–ê –ó–ê–Ø–í–ö–ê ===', req.method, req.body);
  
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { topic, style } = req.body;
    console.log('üìù –ó–∞—è–≤–∫–∞ –∑–∞ –∫—É—Ä—Å:', { topic, style });

    if (!topic || !style) {
      return res.status(400).json({ 
        success: false,
        error: '–¢–µ–º–∞ –∏ —Å—Ç–∏–ª —Å–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏' 
      });
    }

    // –î–ï–ú–û –ö–£–†–°
    const demoCourse = `üéØ –ö–£–†–°: ${topic}
üìö –°–¢–ò–õ: ${style}

–î–µ–º–æ –≤–µ—Ä—Å–∏—è - Gemini AI —Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞...`;

    // –û–ü–ò–¢ –ó–ê GEMINI AI
    if (geminiAvailable && genAI) {
      console.log('üîÑ –ò–∑–≤–∏–∫–≤–∞–º Gemini AI...');
      
      try {
        const model = genAI.getGenerativeModel({ model: "gemini-pro" });
        
        const prompt = `–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç—ä–∫ —É—á–µ–±–µ–Ω –∫—É—Ä—Å –Ω–∞ –ë–™–õ–ì–ê–†–°–ö–ò –µ–∑–∏–∫ –ø–æ —Ç–µ–º–∞: "${topic}". –°—Ç–∏–ª: ${style}. –ë—ä–¥–∏ –ø–æ–ª–µ–∑–µ–Ω –∏ –ø—Ä–∞–∫—Ç–∏—á–µ–Ω.`;
        
        const result = await model.generateContent(prompt);
        const response = await result.response;
        const aiContent = response.text();
        
        console.log('‚úÖ GEMINI –£–°–ü–ï–•! –î—ä–ª–∂–∏–Ω–∞ –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä–∞:', aiContent.length);
        
        return res.status(200).json({
          success: true,
          course: aiContent,
          note: "‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–æ —Å Google Gemini AI!"
        });

      } catch (geminiError) {
        console.log('‚ùå Gemini –≥—Ä–µ—à–∫–∞:', geminiError.message);
        // –ü—Ä–æ–¥—ä–ª–∂–∞–≤–∞–º–µ –∫—ä–º –¥–µ–º–æ –≤–µ—Ä—Å–∏—è
      }
    } else {
      console.log('‚ùå Gemini –Ω–µ –µ –Ω–∞–ª–∏—á–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞:', {
        geminiAvailable,
        hasGenAI: !!genAI,
        hasAPIKey: !!process.env.GEMINI_API_KEY
      });
    }

    // –í–†–™–©–ê–ú–ï –î–ï–ú–û –í–ï–†–°–ò–Ø
    console.log('üìù –í—Ä—ä—â–∞–º –¥–µ–º–æ –≤–µ—Ä—Å–∏—è');
    
    return res.status(200).json({
      success: true,
      course: demoCourse,
      note: `üîß Gemini —Å—Ç–∞—Ç—É—Å: ${geminiAvailable ? '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–∏–∫–≤–∞–Ω–µ' : '–ù–µ –µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω'}`
    });

  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ù–ê –ì–†–ï–®–ö–ê:', error);
    
    return res.status(200).json({
      success: true,
      course: `–ö—É—Ä—Å –ø–æ ${req.body?.topic || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ —Ç–µ–º–∞'}. –ì—Ä–µ—à–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∞.`,
      note: "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞ –≥—Ä–µ—à–∫–∞"
    });
  }
}
