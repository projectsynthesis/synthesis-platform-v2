// api/generate-course.js - HUGGING FACE –§–ò–ö–°–ò–†–ê–ù
console.log('=== ü§ó HUGGING FACE AI –°–ò–°–¢–ï–ú–ê ===');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ environment variables
console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ environment variables:');
console.log('- HUGGING_FACE_TOKEN:', process.env.HUGGING_FACE_TOKEN ? '‚úÖ –ù–ê–õ–ò–ß–ï–ù' : '‚ùå –õ–ò–ü–°–í–ê');

// –§–£–ù–ö–¶–ò–Ø –ó–ê HUGGING FACE AI –° –†–ê–ó–õ–ò–ß–ù–ò –ú–û–î–ï–õ–ò
async function generateWithHuggingFace(topic, style) {
  console.log(`ü§ó –û–ø–∏—Ç–≤–∞–º —Å–µ —Å —Ä–∞–∑–ª–∏—á–Ω–∏ AI –º–æ–¥–µ–ª–∏...`);
  
  // –°–ü–ò–°–™–ö –° –ü–û–î–•–û–î–Ø–©–ò –ú–û–î–ï–õ–ò –ó–ê –¢–ï–ö–°–¢–û–í–ê –ì–ï–ù–ï–†–ê–¶–ò–Ø
  const MODELS = [
    "bigscience/bloom-560m",           // –î–æ–±—ä—Ä –∑–∞ —Ç–µ–∫—Å—Ç–æ–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    "gpt2",                           // –°—Ç–∞–Ω–¥–∞—Ä—Ç–µ–Ω GPT-2
    "EleutherAI/gpt-neo-125m",        // GPT-Neo (–ø–æ-–¥–æ–±—ä—Ä)
    "microsoft/DialoGPT-medium"       // –û—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—è—Ç (–∑–∞ fallback)
  ];

  for (const model of MODELS) {
    try {
      console.log(`üß™ –û–ø–∏—Ç–≤–∞–º —Å –º–æ–¥–µ–ª: ${model}`);
      
      const response = await fetch(
        `https://api-inference.huggingface.co/models/${model}`,
        {
          headers: {
            Authorization: `Bearer ${process.env.HUGGING_FACE_TOKEN}`,
            "Content-Type": "application/json",
          },
          method: "POST",
          body: JSON.stringify({
            inputs: `–°—ä–∑–¥–∞–π —É—á–µ–±–µ–Ω –∫—É—Ä—Å –ø–æ ${topic}. –°—Ç–∏–ª: ${style}.`,
            parameters: {
              max_new_tokens: 500,
              temperature: 0.8,
              do_sample: true,
              return_full_text: false
            }
          }),
        }
      );

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –º–æ–¥–µ–ª–∞ –µ –∑–∞—Ä–µ–¥–µ–Ω
      if (response.status === 503) {
        console.log(`‚è≥ –ú–æ–¥–µ–ª ${model} —Å–µ –∑–∞—Ä–µ–∂–¥–∞... –ø—Ä–æ–ø—É—Å–∫–∞–º`);
        continue;
      }

      if (!response.ok) {
        console.log(`‚ùå –ú–æ–¥–µ–ª ${model} –≥—Ä–µ—à–∫–∞: ${response.status}`);
        continue;
      }

      const result = await response.json();
      console.log(`‚úÖ –ú–æ–¥–µ–ª ${model} –æ—Ç–≥–æ–≤–æ—Ä:`, result);
      
      if (result[0] && result[0].generated_text) {
        console.log(`üéØ –£–°–ü–ï–• —Å –º–æ–¥–µ–ª ${model}!`);
        return formatAIContent(result[0].generated_text, topic, style);
      }
      
    } catch (error) {
      console.log(`‚ùå –ú–æ–¥–µ–ª ${model} –≥—Ä–µ—à–∫–∞:`, error.message);
      continue;
    }
  }
  
  throw new Error('–í—Å–∏—á–∫–∏ –º–æ–¥–µ–ª–∏ —Å–µ –ø—Ä–æ–≤–∞–ª–∏—Ö–∞');
}

// –§–£–ù–ö–¶–ò–Ø –ó–ê –§–û–†–ú–ê–¢–ò–†–ê–ù–ï –ù–ê AI –°–™–î–™–†–ñ–ê–ù–ò–ï–¢–û
function formatAIContent(aiText, topic, style) {
  // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–∞–º–µ —Ç–µ–∫—Å—Ç–∞
  let formatted = aiText
    .replace(/–°—ä–∑–¥–∞–π —É—á–µ–±–µ–Ω –∫—É—Ä—Å –ø–æ \w+\. –°—Ç–∏–ª: \w+\./g, '')
    .replace(/(\n\s*){2,}/g, '\n\n') // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –∏–∑–ª–∏—à–Ω–∏ –ø—Ä–∞–∑–Ω–∏ —Ä–µ–¥–æ–≤–µ
    .trim();
  
  // –î–æ–±–∞–≤—è–º–µ –∑–∞–≥–ª–∞–≤–∏–µ –∞–∫–æ –ª–∏–ø—Å–≤–∞
  if (!formatted.includes('üéØ') && !formatted.includes('–ö–£–†–°:')) {
    formatted = `üéØ –ö–£–†–°: ${topic}\nüìö –°–¢–ò–õ: ${style}\n\n${formatted}`;
  }
  
  return formatted;
}

// –î–ï–ú–û –§–ê–õ–ë–ê–ö –§–£–ù–ö–¶–ò–Ø
function generateDemoCourse(topic, style) {
  return `üéØ –ö–£–†–°: ${topic}
üìö –°–¢–ò–õ: ${style}

–ó–ê–ì–õ–ê–í–ò–ï: "–ü—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–µ–Ω –∫—É—Ä—Å –ø–æ ${topic}"
–û–ü–ò–°–ê–ù–ò–ï: Hugging Face AI —Å–µ –Ω–∞—Å—Ç—Ä–æ–π–≤–∞...

–ú–û–î–£–õ 1: –û–°–ù–û–í–ò
‚úì –£—Ä–æ–∫ 1: –í—ä–≤–µ–¥–µ–Ω–∏–µ –≤ ${topic}
‚úì –£—Ä–æ–∫ 2: –ö–ª—é—á–æ–≤–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∏
‚úì –£—Ä–æ–∫ 3: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ

–ú–û–î–£–õ 2: –†–ê–ó–®–ò–†–ï–ù–ò –ó–ù–ê–ù–ò–Ø  
‚úì –£—Ä–æ–∫ 1: –ù–∞–ø—Ä–µ–¥–Ω–∞–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∏
‚úì –£—Ä–æ–∫ 2: –†–µ–∞–ª–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚úì –£—Ä–æ–∫ 3: –§–∏–Ω–∞–ª–µ–Ω –ø—Ä–æ–µ–∫—Ç

üöÄ AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç—Ç–∞ —Å–µ –∞–∫—Ç–∏–≤–∏—Ä–∞...`;
}

module.exports = async function handler(req, res) {
  console.log('=== üåê HUGGING FACE - –ù–û–í–ê –ó–ê–Ø–í–ö–ê ===');
  
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') return res.status(200).end();
  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });

  try {
    const { topic, style } = req.body;
    console.log('üìù –ó–∞—è–≤–∫–∞:', { topic, style });

    if (!topic || !style) {
      return res.status(400).json({ 
        success: false,
        error: '–¢–µ–º–∞ –∏ —Å—Ç–∏–ª —Å–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏' 
      });
    }

    // –û–ü–ò–¢–í–ê–ù–ï –° HUGGING FACE AI
    if (process.env.HUGGING_FACE_TOKEN) {
      console.log('üîÑ –û–ø–∏—Ç–≤–∞–º —Å–µ —Å Hugging Face AI...');
      
      try {
        const aiContent = await generateWithHuggingFace(topic, style);
        
        console.log('‚úÖ HUGGING FACE AI –£–°–ü–ï–®–ï–ù –û–¢–ì–û–í–û–†!');
        
        return res.status(200).json({
          success: true,
          course: aiContent,
          note: "‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–æ —Å Hugging Face AI!"
        });

      } catch (hfError) {
        console.log('‚ùå Hugging Face AI –≥—Ä–µ—à–∫–∞:', hfError.message);
        // –ü—Ä–æ–¥—ä–ª–∂–∞–≤–∞–º–µ –∫—ä–º –¥–µ–º–æ –≤–µ—Ä—Å–∏—è
      }
    } else {
      console.log('‚ùå HUGGING_FACE_TOKEN –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω');
    }

    // –í–†–™–©–ê–ú–ï –î–ï–ú–û –í–ï–†–°–ò–Ø
    console.log('üìù –í—Ä—ä—â–∞–º –¥–µ–º–æ –≤–µ—Ä—Å–∏—è');
    const demoCourse = generateDemoCourse(topic, style);
    
    return res.status(200).json({
      success: true,
      course: demoCourse,
      note: "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞ –¥–µ–º–æ –≤–µ—Ä—Å–∏—è (AI –º–æ–¥–µ–ª–∏ —Å–µ –∑–∞—Ä–µ–∂–¥–∞—Ç)"
    });

  } catch (error) {
    console.error('üí• –ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞:', error);
    
    return res.status(200).json({
      success: true,
      course: generateDemoCourse(req.body?.topic || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ —Ç–µ–º–∞', req.body?.style || '–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏'),
      note: "‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∞"
    });
  }
};
