// api/generate-course.js - –£–ù–ò–í–ï–†–°–ê–õ–ï–ù –ö–û–î –° –í–°–ò–ß–ö–ò –ú–û–î–ï–õ–ò
console.log('=== üö® –£–ù–ò–í–ï–†–°–ê–õ–ï–ù –ö–û–î –ó–ê GEMINI ===');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ environment variables
console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ environment variables:');
console.log('- GEMINI_API_KEY:', process.env.GEMINI_API_KEY ? '‚úÖ –ù–ê–õ–ò–ß–ï–ù' : '‚ùå –õ–ò–ü–°–í–ê');

const { GoogleGenerativeAI } = require('@google/generative-ai');

let genAI = null;
let geminiAvailable = false;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ Gemini
if (process.env.GEMINI_API_KEY) {
  try {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–º Gemini AI...');
    genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    geminiAvailable = true;
    console.log('‚úÖ Gemini AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.log('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:', error.message);
  }
}

// –°–ø–∏—Å—ä–∫ —Å –≤—Å–∏—á–∫–∏ –≤—ä–∑–º–æ–∂–Ω–∏ –º–æ–¥–µ–ª–∏ –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ
const AVAILABLE_MODELS = [
  'gemini-1.5-flash',
  'gemini-1.5-pro', 
  'gemini-1.0-pro',
  'gemini-pro'
];

module.exports = async function handler(req, res) {
  console.log('=== üåê –ù–û–í–ê –ó–ê–Ø–í–ö–ê ===');
  
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') return res.status(200).end();
  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });

  try {
    const { topic, style } = req.body;
    console.log('üìù –ó–∞—è–≤–∫–∞:', { topic, style });

    if (!topic || !style) {
      return res.status(400).json({ 
        success: false,
        error: '–¢–µ–º–∞ –∏ —Å—Ç–∏–ª —Å–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏' 
      });
    }

    // –î–ï–ú–û –ö–£–†–° (fallback)
    const demoCourse = `üéØ –ö–£–†–°: ${topic}
üìö –°–¢–ò–õ: ${style}

–ó–ê–ì–õ–ê–í–ò–ï: "–ü—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–µ–Ω –∫—É—Ä—Å –ø–æ ${topic}"
–û–ü–ò–°–ê–ù–ò–ï: –¢–æ–∑–∏ –∫—É—Ä—Å –µ —Å—ä–∑–¥–∞–¥–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–Ω–æ –∑–∞ —Ç–µ–±!

–ú–û–î–£–õ 1: –û–°–ù–û–í–ò
‚úì –£—Ä–æ–∫ 1: –í—ä–≤–µ–¥–µ–Ω–∏–µ –≤ ${topic}
‚úì –£—Ä–æ–∫ 2: –ö–ª—é—á–æ–≤–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∏
‚úì –£—Ä–æ–∫ 3: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ

–ú–û–î–£–õ 2: –†–ê–ó–®–ò–†–ï–ù–ò –ó–ù–ê–ù–ò–Ø  
‚úì –£—Ä–æ–∫ 1: –ù–∞–ø—Ä–µ–¥–Ω–∞–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∏
‚úì –£—Ä–æ–∫ 2: –†–µ–∞–ª–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚úì –£—Ä–æ–∫ 3: –§–∏–Ω–∞–ª–µ–Ω –ø—Ä–æ–µ–∫—Ç

üöÄ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–æ —Å—ä—Å —Å–∏—Å—Ç–µ–º–∞—Ç–∞!`;

    // –û–ü–ò–¢ –ó–ê GEMINI AI –° –í–°–ò–ß–ö–ò –ú–û–î–ï–õ–ò
    if (geminiAvailable && genAI) {
      console.log('üîÑ –û–ø–∏—Ç–≤–∞–º —Å–µ –¥–∞ –∏–∑–≤–∏–∫–∞–º Gemini AI...');
      
      // –¢–µ—Å—Ç–≤–∞–º–µ –≤—Å–∏—á–∫–∏ –º–æ–¥–µ–ª–∏ –µ–¥–∏–Ω –ø–æ –µ–¥–∏–Ω
      for (const modelName of AVAILABLE_MODELS) {
        try {
          console.log(`üß™ –¢–µ—Å—Ç–≤–∞–º –º–æ–¥–µ–ª: ${modelName}`);
          
          const model = genAI.getGenerativeModel({ 
            model: modelName
          });
          
          const prompt = `–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç—ä–∫ —É—á–µ–±–µ–Ω –∫—É—Ä—Å –Ω–∞ –ë–™–õ–ì–ê–†–°–ö–ò –µ–∑–∏–∫ –ø–æ —Ç–µ–º–∞: "${topic}". 
          –°—Ç–∏–ª –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ: ${style}.
          –ë—ä–¥–∏ –ø–æ–ª–µ–∑–µ–Ω, –ø—Ä–∞–∫—Ç–∏—á–µ–Ω –∏ –ø–∏—à–µ –Ω–∞ —Ä–∞–∑–±–∏—Ä–∞–µ–º –±—ä–ª–≥–∞—Ä—Å–∫–∏ –µ–∑–∏–∫.`;
          
          console.log(`üì® –ò–∑–ø—Ä–∞—â–∞–º –∑–∞—è–≤–∫–∞ —Å –º–æ–¥–µ–ª ${modelName}...`);
          const result = await model.generateContent(prompt);
          const response = await result.response;
          const aiContent = response.text();
          
          console.log(`‚úÖ –£–°–ü–ï–• —Å –º–æ–¥–µ–ª ${modelName}!`);
          
          return res.status(200).json({
            success: true,
            course: aiContent,
            note: `‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–æ —Å Google Gemini AI (${modelName})!`
          });
          
        } catch (modelError) {
          console.log(`‚ùå –ú–æ–¥–µ–ª ${modelName} –Ω–µ —Ä–∞–±–æ—Ç–∏:`, modelError.message);
          // –ü—Ä–æ–¥—ä–ª–∂–∞–≤–∞–º–µ –∫—ä–º —Å–ª–µ–¥–≤–∞—â–∏—è –º–æ–¥–µ–ª
          continue;
        }
      }
      
      console.log('‚ùå –í—Å–∏—á–∫–∏ –º–æ–¥–µ–ª–∏ —Å–µ –ø—Ä–æ–≤–∞–ª–∏—Ö–∞');
    }

    // –í–†–™–©–ê–ú–ï –î–ï–ú–û –í–ï–†–°–ò–Ø
    console.log('üìù –í—Ä—ä—â–∞–º –¥–µ–º–æ –≤–µ—Ä—Å–∏—è');
    
    return res.status(200).json({
      success: true,
      course: demoCourse,
      note: "üîß –í—Å–∏—á–∫–∏ Gemini –º–æ–¥–µ–ª–∏ —Å–µ –ø—Ä–æ–≤–∞–ª–∏—Ö–∞. –†–∞–±–æ—Ç–∏–º –ø–æ —Ä–µ—à–µ–Ω–∏–µ—Ç–æ!"
    });

  } catch (error) {
    console.error('üí• –ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞:', error);
    
    return res.status(200).json({
      success: true,
      course: `–ö—É—Ä—Å –ø–æ ${req.body?.topic || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ —Ç–µ–º–∞'}. –ì—Ä–µ—à–∫–∞: ${error.message}`,
      note: "‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∞"
    });
  }
};
