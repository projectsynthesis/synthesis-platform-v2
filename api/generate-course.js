// api/generate-course.js - –§–ò–ù–ê–õ–ï–ù –†–ê–ë–û–¢–ï–© –ö–û–î
console.log('üéØ API —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ —Å–µ –∑–∞—Ä–µ–∂–¥–∞...');

const { GoogleGenerativeAI } = require('@google/generative-ai');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ Gemini
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-pro" });

console.log('‚úÖ Gemini AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!');

module.exports = async function handler(req, res) {
  console.log('üì® –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞:', req.method);
  
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { topic, style } = req.body;
    console.log('üìù –ó–∞—è–≤–∫–∞ –∑–∞ –∫—É—Ä—Å:', { topic, style });

    if (!topic || !style) {
      return res.status(400).json({ 
        success: false,
        error: '–¢–µ–º–∞ –∏ —Å—Ç–∏–ª —Å–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏' 
      });
    }

    console.log('üîÑ –ò–∑–≤–∏–∫–≤–∞–º Gemini AI...');

    // Gemini –∑–∞—è–≤–∫–∞
    const prompt = `–°—ä–∑–¥–∞–π –∫—Ä–∞—Ç—ä–∫ —É—á–µ–±–µ–Ω –∫—É—Ä—Å –Ω–∞ –ë–™–õ–ì–ê–†–°–ö–ò –µ–∑–∏–∫ –ø–æ —Ç–µ–º–∞: "${topic}".

–°—Ç–∏–ª –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ: ${style}

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
- –ù–∞–ø–∏—à–∏ –∑–∞–≥–ª–∞–≤–∏–µ –∏ –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ
- –°—ä–∑–¥–∞–π 3 –º–æ–¥—É–ª–∞ —Å –ø–æ 2 —É—Ä–æ–∫–∞ –≤—Å–µ–∫–∏
- –î–æ–±–∞–≤–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
- –ë—ä–¥–∏ –ø–æ–ª–µ–∑–µ–Ω, –ø—Ä–∞–∫—Ç–∏—á–µ–Ω –∏ –º–æ—Ç–∏–≤–∏—Ä–∞—â
- –ò–∑–ø–æ–ª–∑–≤–∞–π –ø–æ–¥—Ö–æ–¥—è—â –µ–∑–∏–∫ –∑–∞ –Ω–∞—á–∏–Ω–∞–µ—â–∏

–§–æ—Ä–º–∞—Ç –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –±—ä–¥–µ —á–∏—Å—Ç —Ç–µ–∫—Å—Ç.`;

    try {
      const result = await model.generateContent(prompt);
      const response = await result.response;
      const aiContent = response.text();
      
      console.log('‚úÖ GEMINI AI –£–°–ü–ï–®–ï–ù –û–¢–ì–û–í–û–†!');
      
      return res.status(200).json({
        success: true,
        course: aiContent,
        note: "‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–æ —Å Google Gemini AI!"
      });

    } catch (geminiError) {
      console.log('‚ùå Gemini –≥—Ä–µ—à–∫–∞:', geminiError);
      
      // Fallback –¥–µ–º–æ –∫—É—Ä—Å –ø—Ä–∏ –≥—Ä–µ—à–∫–∞
      const demoCourse = `üéØ –ö–£–†–°: ${topic}
üìö –°–¢–ò–õ: ${style}

–ó–ê–ì–õ–ê–í–ò–ï: "–ü—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–µ–Ω –∫—É—Ä—Å –ø–æ ${topic}"
–û–ü–ò–°–ê–ù–ò–ï: –¢–æ–∑–∏ –∫—É—Ä—Å –µ —Å—ä–∑–¥–∞–¥–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–Ω–æ –∑–∞ —Ç–µ–±!

–ú–û–î–£–õ 1: –û–°–ù–û–í–ò
‚úì –£—Ä–æ–∫ 1: –í—ä–≤–µ–¥–µ–Ω–∏–µ –≤ ${topic}
‚úì –£—Ä–æ–∫ 2: –ö–ª—é—á–æ–≤–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∏
‚úì –£—Ä–æ–∫ 3: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ

–ú–û–î–£–õ 2: –†–ê–ó–®–ò–†–ï–ù–ò –ó–ù–ê–ù–ò–Ø  
‚úì –£—Ä–æ–∫ 1: –ù–∞–ø—Ä–µ–¥–Ω–∞–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∏
‚úì –£—Ä–æ–∫ 2: –†–µ–∞–ª–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚úì –£—Ä–æ–∫ 3: –§–∏–Ω–∞–ª–µ–Ω –ø—Ä–æ–µ–∫—Ç

‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞ –¥–µ–º–æ –≤–µ—Ä—Å–∏—è - Gemini AI —Å–µ –Ω–∞—Å—Ç—Ä–æ–π–≤–∞`;

      return res.status(200).json({
        success: true,
        course: demoCourse,
        note: "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞ –¥–µ–º–æ –≤–µ—Ä—Å–∏—è (Gemini –≥—Ä–µ—à–∫–∞)"
      });
    }

  } catch (error) {
    console.error('üí• –ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞:', error);
    
    return res.status(200).json({
      success: true,
      course: `–ö—É—Ä—Å –ø–æ ${req.body?.topic || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ —Ç–µ–º–∞'}. –í—Ä–µ–º–µ–Ω–Ω–∞ –≥—Ä–µ—à–∫–∞.`,
      note: "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞ –≥—Ä–µ—à–∫–∞"
    });
  }
};
