// api/generate-course.js - HUGGING FACE –í–ï–†–°–ò–Ø
console.log('=== ü§ó HUGGING FACE AI –°–ò–°–¢–ï–ú–ê ===');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ environment variables
console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ environment variables:');
console.log('- HUGGING_FACE_TOKEN:', process.env.HUGGING_FACE_TOKEN ? '‚úÖ –ù–ê–õ–ò–ß–ï–ù' : '‚ùå –õ–ò–ü–°–í–ê');

// –§–£–ù–ö–¶–ò–Ø –ó–ê HUGGING FACE AI
async function generateWithHuggingFace(topic, style) {
  console.log(`ü§ó –ò–∑–≤–∏–∫–≤–∞–º Hugging Face AI –∑–∞: ${topic} (${style})`);
  
  try {
    // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ –ø–æ-–¥–æ–±—ä—Ä –º–æ–¥–µ–ª –∑–∞ —Ç–µ–∫—Å—Ç–æ–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    const response = await fetch(
      "https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium",
      {
        headers: {
          Authorization: `Bearer ${process.env.HUGGING_FACE_TOKEN}`,
          "Content-Type": "application/json",
        },
        method: "POST",
        body: JSON.stringify({
          inputs: `–°—ä–∑–¥–∞–π –∫—Ä–∞—Ç—ä–∫ —É—á–µ–±–µ–Ω –∫—É—Ä—Å –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏ –µ–∑–∏–∫ –ø–æ —Ç–µ–º–∞: ${topic}. 
          –°—Ç–∏–ª –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ: ${style}.
          –ö—É—Ä—Å—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –≤–∫–ª—é—á–≤–∞:
          - –ó–∞–≥–ª–∞–≤–∏–µ
          - –û–ø–∏—Å–∞–Ω–∏–µ  
          - 3-4 –º–æ–¥—É–ª–∞ —Å —É—Ä–æ—Ü–∏
          - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
          –ë—ä–¥–∏ –ø–æ–ª–µ–∑–µ–Ω –∏ –ø—Ä–∞–∫—Ç–∏—á–µ–Ω.`,
          parameters: {
            max_length: 1000,
            temperature: 0.7,
            do_sample: true
          }
        }),
      }
    );

    if (!response.ok) {
      throw new Error(`HTTP –≥—Ä–µ—à–∫–∞! —Å—Ç–∞—Ç—É—Å: ${response.status}`);
    }

    const result = await response.json();
    console.log('‚úÖ Hugging Face –æ—Ç–≥–æ–≤–æ—Ä –ø–æ–ª—É—á–µ–Ω:', result);
    
    if (result.error) {
      throw new Error(result.error);
    }
    
    if (result[0] && result[0].generated_text) {
      return result[0].generated_text;
    } else {
      throw new Error('–ù–µ–æ—á–∞–∫–≤–∞–Ω —Ñ–æ—Ä–º–∞—Ç –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä –æ—Ç Hugging Face');
    }
    
  } catch (error) {
    console.log('‚ùå Hugging Face –≥—Ä–µ—à–∫–∞:', error.message);
    throw error;
  }
}

// –î–ï–ú–û –§–ê–õ–ë–ê–ö –§–£–ù–ö–¶–ò–Ø
function generateDemoCourse(topic, style) {
  return `üéØ –ö–£–†–°: ${topic}
üìö –°–¢–ò–õ: ${style}

–ó–ê–ì–õ–ê–í–ò–ï: "–ü—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–µ–Ω –∫—É—Ä—Å –ø–æ ${topic}"
–û–ü–ò–°–ê–ù–ò–ï: –¢–æ–∑–∏ –∫—É—Ä—Å –µ —Å—ä–∑–¥–∞–¥–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–Ω–æ –∑–∞ —Ç–µ–±!

–ú–û–î–£–õ 1: –û–°–ù–û–í–ò
‚úì –£—Ä–æ–∫ 1: –í—ä–≤–µ–¥–µ–Ω–∏–µ –≤ ${topic}
‚úì –£—Ä–æ–∫ 2: –ö–ª—é—á–æ–≤–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∏
‚úì –£—Ä–æ–∫ 3: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ

–ú–û–î–£–õ 2: –†–ê–ó–®–ò–†–ï–ù–ò –ó–ù–ê–ù–ò–Ø  
‚úì –£—Ä–æ–∫ 1: –ù–∞–ø—Ä–µ–¥–Ω–∞–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∏
‚úì –£—Ä–æ–∫ 2: –†–µ–∞–ª–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚úì –£—Ä–æ–∫ 3: –§–∏–Ω–∞–ª–µ–Ω –ø—Ä–æ–µ–∫—Ç

üöÄ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–æ —Å—ä—Å —Å–∏—Å—Ç–µ–º–∞—Ç–∞!`;
}

module.exports = async function handler(req, res) {
  console.log('=== üåê HUGGING FACE - –ù–û–í–ê –ó–ê–Ø–í–ö–ê ===');
  
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') return res.status(200).end();
  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });

  try {
    const { topic, style } = req.body;
    console.log('üìù –ó–∞—è–≤–∫–∞:', { topic, style });

    if (!topic || !style) {
      return res.status(400).json({ 
        success: false,
        error: '–¢–µ–º–∞ –∏ —Å—Ç–∏–ª —Å–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏' 
      });
    }

    // –û–ü–ò–¢–í–ê–ù–ï –° HUGGING FACE AI
    if (process.env.HUGGING_FACE_TOKEN) {
      console.log('üîÑ –û–ø–∏—Ç–≤–∞–º —Å–µ –¥–∞ –∏–∑–≤–∏–∫–∞–º Hugging Face AI...');
      
      try {
        const aiContent = await generateWithHuggingFace(topic, style);
        
        console.log('‚úÖ HUGGING FACE AI –£–°–ü–ï–®–ï–ù –û–¢–ì–û–í–û–†!');
        
        return res.status(200).json({
          success: true,
          course: aiContent,
          note: "‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–æ —Å Hugging Face AI!"
        });

      } catch (hfError) {
        console.log('‚ùå Hugging Face AI –≥—Ä–µ—à–∫–∞:', hfError.message);
        // –ü—Ä–æ–¥—ä–ª–∂–∞–≤–∞–º–µ –∫—ä–º –¥–µ–º–æ –≤–µ—Ä—Å–∏—è
      }
    } else {
      console.log('‚ùå HUGGING_FACE_TOKEN –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω');
    }

    // –í–†–™–©–ê–ú–ï –î–ï–ú–û –í–ï–†–°–ò–Ø
    console.log('üìù –í—Ä—ä—â–∞–º –¥–µ–º–æ –≤–µ—Ä—Å–∏—è');
    const demoCourse = generateDemoCourse(topic, style);
    
    return res.status(200).json({
      success: true,
      course: demoCourse,
      note: process.env.HUGGING_FACE_TOKEN ? "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞ –¥–µ–º–æ –≤–µ—Ä—Å–∏—è (Hugging Face –≥—Ä–µ—à–∫–∞)" : "üîß Hugging Face –Ω–µ –µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω"
    });

  } catch (error) {
    console.error('üí• –ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞:', error);
    
    return res.status(200).json({
      success: true,
      course: generateDemoCourse(req.body?.topic || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ —Ç–µ–º–∞', req.body?.style || '–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏'),
      note: "‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∞"
    });
  }
};
