// api/generate-course.js - OPENAI –° –ü–™–õ–ù–ê –ó–ê–©–ò–¢–ê
import OpenAI from 'openai';

console.log('üîß API —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ —Å–µ –∑–∞—Ä–µ–∂–¥–∞ —Å OpenAI...');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ OpenAI –° –ó–ê–©–ò–¢–ê
let openai;
try {
  if (process.env.OPENAI_API_KEY) {
    openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
    console.log('‚úÖ OpenAI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ');
  } else {
    console.log('‚ùå OPENAI_API_KEY –ª–∏–ø—Å–≤–∞ –≤ environment variables');
  }
} catch (error) {
  console.log('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ OpenAI:', error.message);
}

export default async function handler(req, res) {
  console.log('=== API CALL STARTED ===');
  
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') return res.status(200).end();
  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });

  try {
    const { topic, style } = req.body;
    console.log('–ó–∞—è–≤–∫–∞ –∑–∞ –∫—É—Ä—Å:', { topic, style });

    if (!topic || !style) {
      return res.status(400).json({ 
        success: false,
        error: 'Topic and style are required' 
      });
    }

    // –î–ï–ú–û –ö–£–†–° (fallback)
    const demoCourse = `
üéØ –ö–£–†–°: ${topic}
üìö –°–¢–ò–õ: ${style}

–ó–ê–ì–õ–ê–í–ò–ï: "–ü—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–µ–Ω –∫—É—Ä—Å –ø–æ ${topic}"
–û–ü–ò–°–ê–ù–ò–ï: –¢–æ–∑–∏ –∫—É—Ä—Å –µ —Å—ä–∑–¥–∞–¥–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–Ω–æ –∑–∞ —Ç–µ–± —Å–ø–æ—Ä–µ–¥ –∏–∑–±—Ä–∞–Ω–∏—è —Å—Ç–∏–ª –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ.

–ú–û–î–£–õ 1: –û–°–ù–û–í–ò
‚úì –£—Ä–æ–∫ 1: –í—ä–≤–µ–¥–µ–Ω–∏–µ –≤ ${topic}
‚úì –£—Ä–æ–∫ 2: –ö–ª—é—á–æ–≤–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∏
‚úì –£—Ä–æ–∫ 3: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ

–ú–û–î–£–õ 2: –†–ê–ó–®–ò–†–ï–ù–ò –ó–ù–ê–ù–ò–Ø  
‚úì –£—Ä–æ–∫ 1: –ù–∞–ø—Ä–µ–¥–Ω–∞–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∏
‚úì –£—Ä–æ–∫ 2: –†–µ–∞–ª–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚úì –£—Ä–æ–∫ 3: –§–∏–Ω–∞–ª–µ–Ω –ø—Ä–æ–µ–∫—Ç

üöÄ OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è—Ç–∞ —Å–µ –Ω–∞—Å—Ç—Ä–æ–π–≤–∞...
`;

    // –û–ü–ò–¢–í–ê–ù–ï –î–ê –ò–ó–ü–û–õ–ó–í–ê–ú–ï OPENAI
    if (openai) {
      console.log('üîÑ –û–ø–∏—Ç–≤–∞–º —Å–µ –¥–∞ –∏–∑–≤–∏–∫–∞–º OpenAI...');
      
      try {
        const completion = await openai.chat.completions.create({
          model: "gpt-3.5-turbo",
          messages: [
            {
              role: "system",
              content: "–¢–∏ —Å–∏ —É—á–∏—Ç–µ–ª. –ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç—ä–∫ —É—á–µ–±–µ–Ω –∫—É—Ä—Å –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏ –µ–∑–∏–∫."
            },
            {
              role: "user", 
              content: `–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç—ä–∫ –∫—É—Ä—Å –ø–æ ${topic} –≤ —Å—Ç–∏–ª ${style}. –í–∫–ª—é—á–∏ –∑–∞–≥–ª–∞–≤–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω—è–∫–æ–ª–∫–æ —É—Ä–æ–∫–∞.`
            }
          ],
          max_tokens: 600,
          temperature: 0.7,
        });

        const aiContent = completion.choices[0].message.content;
        console.log('‚úÖ OPENAI –£–°–ü–ï–®–ï–ù –û–¢–ì–û–í–û–†!');
        
        return res.status(200).json({
          success: true,
          course: aiContent,
          note: "‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–æ —Å –∏–∑–∫—É—Å—Ç–≤–µ–Ω –∏–Ω—Ç–µ–ª–µ–∫—Ç!"
        });

      } catch (openaiError) {
        console.log('‚ùå OpenAI –≥—Ä–µ—à–∫–∞:', openaiError.message);
        // –ü—Ä–∏ –≥—Ä–µ—à–∫–∞ –≤ OpenAI, –≤—Ä—ä—â–∞–º–µ –¥–µ–º–æ –≤–µ—Ä—Å–∏—è
      }
    }

    // –ê–ö–û OPENAI –ù–ï –†–ê–ë–û–¢–ò - –í–†–™–©–ê–ú–ï –î–ï–ú–û –í–ï–†–°–ò–Ø
    console.log('üìù –í—Ä—ä—â–∞–º –¥–µ–º–æ –≤–µ—Ä—Å–∏—è');
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    return res.status(200).json({
      success: true,
      course: demoCourse,
      note: openai ? "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞ –¥–µ–º–æ –≤–µ—Ä—Å–∏—è (OpenAI –≥—Ä–µ—à–∫–∞)" : "üîß OpenAI –Ω–µ –µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω"
    });

  } catch (error) {
    console.error('‚ùå –ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞:', error);
    
    return res.status(200).json({
      success: true,
      course: `–ö—É—Ä—Å –ø–æ ${req.body.topic}. –í—Ä–µ–º–µ–Ω–Ω–∞ –≥—Ä–µ—à–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∞.`,
      note: "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞ –≥—Ä–µ—à–∫–∞"
    });
  }
}
