// api/generate-course.js - –ü–™–õ–ù–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
console.log('=== üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–ü–û–ß–ù–ê–¢–ê ===');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å–∏—á–∫–∏ environment variables
console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ environment variables:');
console.log('- process.env.GEMINI_API_KEY:', process.env.GEMINI_API_KEY ? '‚úÖ –°–™–©–ï–°–¢–í–£–í–ê' : '‚ùå –õ–ò–ü–°–í–ê');
console.log('- process.env.OPENAI_API_KEY:', process.env.OPENAI_API_KEY ? '‚úÖ –°–™–©–ï–°–¢–í–£–í–ê' : '‚ùå –õ–ò–ü–°–í–ê');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—ä—Ä–≤–∏—Ç–µ –∑–Ω–∞—Ü–∏ –æ—Ç –∫–ª—é—á–∞ (–∞–∫–æ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞)
if (process.env.GEMINI_API_KEY) {
  console.log('- GEMINI_API_KEY –ø—ä—Ä–≤–∏ 10 –∑–Ω–∞–∫–∞:', process.env.GEMINI_API_KEY.substring(0, 10) + '...');
  console.log('- –î—ä–ª–∂–∏–Ω–∞ –Ω–∞ –∫–ª—é—á–∞:', process.env.GEMINI_API_KEY.length);
} else {
  console.log('‚ùå –ö–†–ò–¢–ò–ß–ù–û: GEMINI_API_KEY –ù–ï –ï –ó–ê–î–ê–î–ï–ù!');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—Ä—É–≥–∏ environment variables
console.log('- VERCEL:', process.env.VERCEL ? '‚úÖ –î–∞' : '‚ùå –ù–µ');
console.log('- NODE_ENV:', process.env.NODE_ENV || '–ù–µ –µ –∑–∞–¥–∞–¥–µ–Ω');

let genAI = null;
let geminiAvailable = false;
let initializationError = null;

// –û–ø–∏—Ç –∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ Gemini
if (process.env.GEMINI_API_KEY) {
  try {
    console.log('üîÑ –û–ø–∏—Ç–≤–∞–º –¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–º Gemini...');
    const { GoogleGenerativeAI } = require('@google/generative-ai');
    genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    
    // –¢–µ—Å—Ç–≤–∞–º–µ –¥–∞–ª–∏ –∫–ª—é—á–∞ –µ –≤–∞–ª–∏–¥–µ–Ω —Å –ø—Ä–æ—Å—Ç–∞ –∑–∞—è–≤–∫–∞
    console.log('üß™ –¢–µ—Å—Ç–≤–∞–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ API –∫–ª—é—á–∞...');
    const model = genAI.getGenerativeModel({ model: "gemini-pro" });
    
    geminiAvailable = true;
    console.log('‚úÖ GEMINI AI –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–ê–ù –£–°–ü–ï–®–ù–û!');
    
  } catch (error) {
    geminiAvailable = false;
    initializationError = error.message;
    console.log('‚ùå –ì–†–ï–®–ö–ê –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ Gemini:', error.message);
  }
} else {
  console.log('‚ùå –ù–ï –ú–û–ì–ê –¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–º Gemini - –õ–ò–ü–°–í–ê API –ö–õ–Æ–ß!');
}

console.log('=== üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–™–†–®–ï–ù–ê ===');
console.log('- Gemini –¥–æ—Å—Ç—ä–ø–µ–Ω:', geminiAvailable);
console.log('- –ò–º–∞ –ª–∏ –≥—Ä–µ—à–∫–∞:', initializationError || '–ù—è–º–∞');

module.exports = async function handler(req, res) {
  console.log('=== üåê –ù–û–í–ê –ó–ê–Ø–í–ö–ê –ü–û–õ–£–ß–ï–ù–ê ===');
  
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    console.log('üì® OPTIONS –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–µ–Ω–∞');
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    console.log('‚ùå –ì—Ä–µ—à–µ–Ω –º–µ—Ç–æ–¥:', req.method);
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { topic, style } = req.body;
    console.log('üìù –î–∞–Ω–Ω–∏ –æ—Ç –∑–∞—è–≤–∫–∞:', { topic, style });

    if (!topic || !style) {
      console.log('‚ùå –õ–∏–ø—Å–≤–∞ —Ç–µ–º–∞ –∏–ª–∏ —Å—Ç–∏–ª');
      return res.status(400).json({ 
        success: false,
        error: '–¢–µ–º–∞ –∏ —Å—Ç–∏–ª —Å–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏' 
      });
    }

    // –î–ï–ú–û –ö–£–†–°
    const demoCourse = `üéØ –ö–£–†–°: ${topic}
üìö –°–¢–ò–õ: ${style}

–î–ò–ê–ì–ù–û–°–¢–ò–ß–ù–ê –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
- Gemini –¥–æ—Å—Ç—ä–ø–µ–Ω: ${geminiAvailable}
- –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${initializationError || '–ù—è–º–∞'}
- API –∫–ª—é—á –∑–∞–¥–∞–¥–µ–Ω: ${process.env.GEMINI_API_KEY ? '–î–∞' : '–ù–µ'}

–¢–æ–≤–∞ –µ –¥–µ–º–æ –≤–µ—Ä—Å–∏—è. –†–∞–±–æ—Ç–∏–º –ø–æ —Ä–µ—à–µ–Ω–∏–µ—Ç–æ!`;

    // –û–ü–ò–¢ –ó–ê GEMINI AI
    if (geminiAvailable && genAI) {
      console.log('üîÑ –û–ø–∏—Ç–≤–∞–º —Å–µ –¥–∞ –∏–∑–≤–∏–∫–∞–º Gemini AI...');
      
      try {
        const model = genAI.getGenerativeModel({ model: "gemini-pro" });
        
        const prompt = `–ù–∞–ø–∏—à–∏ –º–Ω–æ–≥–æ –∫—Ä–∞—Ç—ä–∫ —É—á–µ–±–µ–Ω –∫—É—Ä—Å –Ω–∞ –ë–™–õ–ì–ê–†–°–ö–ò –µ–∑–∏–∫ –ø–æ —Ç–µ–º–∞: "${topic}". –°—Ç–∏–ª: ${style}.`;
        
        console.log('üì® –ò–∑–ø—Ä–∞—â–∞–º –∑–∞—è–≤–∫–∞ –∫—ä–º Gemini...');
        const result = await model.generateContent(prompt);
        const response = await result.response;
        const aiContent = response.text();
        
        console.log('‚úÖ GEMINI AI –£–°–ü–ï–®–ï–ù –û–¢–ì–û–í–û–†!');
        
        return res.status(200).json({
          success: true,
          course: aiContent,
          note: "‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–æ —Å Google Gemini AI!"
        });

      } catch (geminiError) {
        console.log('‚ùå Gemini –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤–∫–∞:', geminiError.message);
        // –ü—Ä–æ–¥—ä–ª–∂–∞–≤–∞–º–µ –∫—ä–º –¥–µ–º–æ –≤–µ—Ä—Å–∏—è
      }
    }

    // –í–†–™–©–ê–ú–ï –î–ï–ú–û –í–ï–†–°–ò–Ø –° –î–ò–ê–ì–ù–û–°–¢–ò–ß–ù–ê –ò–ù–§–û–†–ú–ê–¶–ò–Ø
    console.log('üìù –í—Ä—ä—â–∞–º –¥–µ–º–æ –≤–µ—Ä—Å–∏—è —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è');
    
    return res.status(200).json({
      success: true,
      course: demoCourse,
      note: `üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: Gemini –¥–æ—Å—Ç—ä–ø–µ–Ω=${geminiAvailable}, –ì—Ä–µ—à–∫–∞=${initializationError || '–ù—è–º–∞'}`
    });

  } catch (error) {
    console.error('üí• –ù–ï–û–ß–ê–ö–í–ê–ù–ê –ì–†–ï–®–ö–ê:', error);
    
    return res.status(200).json({
      success: true,
      course: `–ö—É—Ä—Å –ø–æ ${req.body?.topic || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ —Ç–µ–º–∞'}. –ì—Ä–µ—à–∫–∞: ${error.message}`,
      note: "‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∞"
    });
  }
};
