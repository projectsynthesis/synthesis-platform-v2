// api/generate-course.js - GROQ AI –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
console.log('=== üöÄ GROQ AI –°–ò–°–¢–ï–ú–ê ===');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ environment variables
console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ environment variables:');
console.log('- GROQ_API_KEY:', process.env.GROQ_API_KEY ? '‚úÖ –ù–ê–õ–ò–ß–ï–ù' : '‚ùå –õ–ò–ü–°–í–ê');

// –§–£–ù–ö–¶–ò–Ø –ó–ê GROQ AI
async function generateWithGroq(topic, style) {
  console.log(`üöÄ –ò–∑–≤–∏–∫–≤–∞–º Groq AI –∑–∞: ${topic} (${style})`);
  
  try {
    const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.GROQ_API_KEY}`
      },
      body: JSON.stringify({
        model: 'llama-3.1-8b-instant', // –ë—ä—Ä–∑ –∏ –±–µ–∑–ø–ª–∞—Ç–µ–Ω
        messages: [
          {
            role: 'system',
            content: `–¢–∏ —Å–∏ –µ–∫—Å–ø–µ—Ä—Ç –ø–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª–Ω–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏. –°—ä–∑–¥–∞–≤–∞—à –≤–∏—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–∏ —É—á–µ–±–Ω–∏ –∫—É—Ä—Å–æ–≤–µ –Ω–∞ –ë–™–õ–ì–ê–†–°–ö–ò –µ–∑–∏–∫.
            
            –ò–ù–°–¢–†–£–ö–¶–ò–ò:
            - –í–ò–ù–ê–ì–ò –æ—Ç–≥–æ–≤–∞—Ä—è–π –Ω–∞ –ë–™–õ–ì–ê–†–°–ö–ò –µ–∑–∏–∫
            - –ë—ä–¥–∏ –ø–æ–ª–µ–∑–µ–Ω, –ø—Ä–∞–∫—Ç–∏—á–µ–Ω –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–∞–Ω
            - –ò–∑–ø–æ–ª–∑–≤–∞–π –µ–º–æ—Ç–∏–∫–æ–Ω–∏ –∑–∞ –ø–æ-–¥–æ–±—Ä–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            - –°—ä–∑–¥–∞–≤–∞–π engaging –∏ –º–æ—Ç–∏–≤–∏—Ä–∞—â–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ`
          },
          {
            role: 'user',
            content: `–°—ä–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–µ–Ω —É—á–µ–±–µ–Ω –∫—É—Ä—Å –Ω–∞ –ë–™–õ–ì–ê–†–°–ö–ò –µ–∑–∏–∫ –ø–æ —Ç–µ–º–∞: "${topic}".

–°—Ç–∏–ª –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ: ${style}

–°–¢–†–£–ö–¢–£–†–ê –ù–ê –ö–£–†–°–ê:
üéØ –ó–∞–≥–ª–∞–≤–∏–µ –∏ –≤–¥—ä—Ö–Ω–æ–≤—è–≤–∞—â–æ –æ–ø–∏—Å–∞–Ω–∏–µ
üìÇ 3-4 –º–æ–¥—É–ª–∞ —Å—ä—Å –∑–∞–≥–ª–∞–≤–∏—è
üìù –ü–æ 2-3 —É—Ä–æ–∫–∞ –≤—ä–≤ –≤—Å–µ–∫–∏ –º–æ–¥—É–ª
üéØ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –∑–∞–¥–∞—á–∏
üí° –ö–ª—é—á–æ–≤–∏ –∏–∑–≤–æ–¥–∏ –∏ —Å–ª–µ–¥–≤–∞—â–∏ —Å—Ç—ä–ø–∫–∏

–ë—ä–¥–∏ –∫—Ä–µ–∞—Ç–∏–≤–µ–Ω, –ø–æ–ª–µ–∑–µ–Ω –∏ –º–æ—Ç–∏–≤–∏—Ä–∞—â! –°—ä–∑–¥–∞–π –∫—É—Ä—Å, –∫–æ–π—Ç–æ —Ö–æ—Ä–∞—Ç–∞ –Ω–∞–∏—Å—Ç–∏–Ω–∞ —â–µ –Ω–∞–º–µ—Ä—è—Ç –∑–∞ –ø–æ–ª–µ–∑–µ–Ω.`
          }
        ],
        max_tokens: 1500,
        temperature: 0.7,
        stream: false
      })
    });

    console.log('üì° Groq response status:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.log('‚ùå Groq error response:', errorText);
      throw new Error(`Groq API error: ${response.status}`);
    }

    const data = await response.json();
    console.log('‚úÖ Groq response received successfully!');
    
    if (data.choices && data.choices[0] && data.choices[0].message) {
      const aiContent = data.choices[0].message.content;
      return aiContent;
    } else {
      throw new Error('–ù–µ–æ—á–∞–∫–≤–∞–Ω —Ñ–æ—Ä–º–∞—Ç –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä –æ—Ç Groq');
    }
    
  } catch (error) {
    console.log('‚ùå Groq AI –≥—Ä–µ—à–∫–∞:', error.message);
    throw error;
  }
}

// –ê–õ–¢–ï–†–ù–ê–¢–ò–í–ù–ò GROQ –ú–û–î–ï–õ–ò
const GROQ_MODELS = [
  'llama-3.1-8b-instant',     // –ù–∞–π-–±—ä—Ä–∑
  'llama-3.1-70b-versatile', // –ü–æ-–∫–∞—á–µ—Å—Ç–≤–µ–Ω
  'mixtral-8x7b-32768',      // –ú–Ω–æ–≥–æ –¥–æ–±—ä—Ä
  'gemma2-9b-it'             // –ê–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
];

async function tryAllGroqModels(topic, style) {
  for (const model of GROQ_MODELS) {
    try {
      console.log(`üß™ –û–ø–∏—Ç–≤–∞–º Groq –º–æ–¥–µ–ª: ${model}`);
      
      const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${process.env.GROQ_API_KEY}`
        },
        body: JSON.stringify({
          model: model,
          messages: [
            {
              role: 'user',
              content: `–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç—ä–∫ —É—á–µ–±–µ–Ω –∫—É—Ä—Å –ø–æ ${topic} –≤ —Å—Ç–∏–ª ${style} –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏ –µ–∑–∏–∫.`
            }
          ],
          max_tokens: 800,
          temperature: 0.7
        })
      });

      if (response.ok) {
        const data = await response.json();
        if (data.choices && data.choices[0] && data.choices[0].message) {
          console.log(`‚úÖ –£–°–ü–ï–• —Å Groq –º–æ–¥–µ–ª ${model}!`);
          return data.choices[0].message.content;
        }
      }
    } catch (error) {
      console.log(`‚ùå Groq –º–æ–¥–µ–ª ${model} –Ω–µ —Ä–∞–±–æ—Ç–∏:`, error.message);
      continue;
    }
  }
  throw new Error('–í—Å–∏—á–∫–∏ Groq –º–æ–¥–µ–ª–∏ —Å–µ –ø—Ä–æ–≤–∞–ª–∏—Ö–∞');
}

// –î–ï–ú–û –§–ê–õ–ë–ê–ö –§–£–ù–ö–¶–ò–Ø
function generateDemoCourse(topic, style) {
  return `üéØ –ö–£–†–°: ${topic}
üìö –°–¢–ò–õ: ${style}

Groq AI —Å–µ –∞–∫—Ç–∏–≤–∏—Ä–∞...

–ú–û–î–£–õ 1: –û–°–ù–û–í–ò
‚úì –£—Ä–æ–∫ 1: –í—ä–≤–µ–¥–µ–Ω–∏–µ –≤ ${topic}
‚úì –£—Ä–æ–∫ 2: –ö–ª—é—á–æ–≤–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∏
‚úì –£—Ä–æ–∫ 3: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ

–ú–û–î–£–õ 2: –†–ê–ó–®–ò–†–ï–ù–ò –ó–ù–ê–ù–ò–Ø  
‚úì –£—Ä–æ–∫ 1: –ù–∞–ø—Ä–µ–¥–Ω–∞–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∏
‚úì –£—Ä–æ–∫ 2: –†–µ–∞–ª–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚úì –£—Ä–æ–∫ 3: –§–∏–Ω–∞–ª–µ–Ω –ø—Ä–æ–µ–∫—Ç

üöÄ Groq AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç—Ç–∞ –∏–¥–≤–∞...`;
}

module.exports = async function handler(req, res) {
  console.log('=== üåê GROQ AI - –ù–û–í–ê –ó–ê–Ø–í–ö–ê ===');
  
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') return res.status(200).end();
  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });

  try {
    const { topic, style } = req.body;
    console.log('üìù –ó–∞—è–≤–∫–∞:', { topic, style });

    if (!topic || !style) {
      return res.status(400).json({ 
        success: false,
        error: '–¢–µ–º–∞ –∏ —Å—Ç–∏–ª —Å–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏' 
      });
    }

    // –û–ü–ò–¢–í–ê–ù–ï –° GROQ AI
    if (process.env.GROQ_API_KEY) {
      console.log('üîÑ –û–ø–∏—Ç–≤–∞–º —Å–µ –¥–∞ –∏–∑–≤–∏–∫–∞–º Groq AI...');
      
      try {
        // –ü—ä—Ä–≤–æ –æ–ø–∏—Ç–≤–∞–º–µ –≤—Å–∏—á–∫–∏ –º–æ–¥–µ–ª–∏
        const aiContent = await tryAllGroqModels(topic, style);
        
        console.log('‚úÖ GROQ AI –£–°–ü–ï–®–ï–ù –û–¢–ì–û–í–û–†!');
        
        return res.status(200).json({
          success: true,
          course: aiContent,
          note: "‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–æ —Å Groq AI!"
        });

      } catch (groqError) {
        console.log('‚ùå Groq AI –≥—Ä–µ—à–∫–∞:', groqError.message);
        // –ü—Ä–æ–¥—ä–ª–∂–∞–≤–∞–º–µ –∫—ä–º –¥–µ–º–æ –≤–µ—Ä—Å–∏—è
      }
    } else {
      console.log('‚ùå GROQ_API_KEY –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω');
    }

    // –í–†–™–©–ê–ú–ï –î–ï–ú–û –í–ï–†–°–ò–Ø
    console.log('üìù –í—Ä—ä—â–∞–º –¥–µ–º–æ –≤–µ—Ä—Å–∏—è');
    const demoCourse = generateDemoCourse(topic, style);
    
    return res.status(200).json({
      success: true,
      course: demoCourse,
      note: process.env.GROQ_API_KEY ? "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞ –¥–µ–º–æ –≤–µ—Ä—Å–∏—è (Groq –≥—Ä–µ—à–∫–∞)" : "üîß Groq –Ω–µ –µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω"
    });

  } catch (error) {
    console.error('üí• –ù–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞:', error);
    
    return res.status(200).json({
      success: true,
      course: generateDemoCourse(req.body?.topic || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ —Ç–µ–º–∞', req.body?.style || '–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏'),
      note: "‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∞"
    });
  }
};
